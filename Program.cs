using System.Net.Sockets;
using System.Net;

namespace Task_1
{
   /*
   
   Задача 1. Доработать наш класс Server, чтобы программа стала полностью клиенсерверной,
   с возможностью отправки данных сразу нескольким клиентам. Доработаем наш код следующим образом. Представим,
   что наш сервер умеет отправлять сообщения по имени клиента, а так же возвращать список всех подключенных
   к нему клиентов. Для этого доработаем наш класс Message, добавив ему поле ToName

   Задача 2. Доработаем систему команд. Имя пользователя "Сервер" всегда будет Server. Если сервер получает команду 
   (как текст сообщения) - register , то он добавялет клиента в свой список. delete - удаляет клиента из списка.
   Если сервер не получает имени подлучаетеля, то он отправялет сообщение всем клиентам. Если сервер получает имя получателя, 
   то он отправляет сообщение одному конкретному клиенту.

   Задача 3. Доработайте код клиента, чтобы он одновременно слушал входящие сообщения и ждал  ввода сообщений через консоль.
   Напишите 2 метода, каждый из которых будет запускаться в своем потоке. Не забудьте сделать так, чтобы сокет был общим для
   обоих методов. Для этого добавьте еще один параметр командной строки - локальный порт.
       
   */
    
    
    internal class Program
    {        
        static async Task Main(string[] args)
        {          
            if (args.Length == 0)
            {

                await Server.AcceptMess("Server");
            }
            else
            {
                int localPort = int.Parse(args[1]); // Водим с консоли номер порта для приема сообщений вторым аргументом 
                UdpClient udpClient = new UdpClient(localPort); //Устанавливаем порт для прослушивания входящих сообщений
                var ListenTask = Task.Run(() => Client.ClientListener(udpClient)); // Передем методу сокет с настройками
                var SendTask = Task.Run(() => Client.ClientSender(args[0].ToString(), udpClient)); // Передем методу имя пользователя (вводим с консоли первым аргументом)
                                                                                                    // и сокет с настройками           
                await Task.WhenAll(SendTask, ListenTask);                
            }

            await Console.Out.WriteLineAsync("Нажмите Enter для выхода");
            Console.ReadLine();

        }
    }
}
